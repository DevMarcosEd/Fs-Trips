// Definindo o gerador de cliente Prisma, que será utilizado para interagir com o banco de dados.
generator client {
  provider = "prisma-client-js"
}

// Configuração da fonte de dados (data source) para o banco de dados PostgreSQL.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Define a URL do banco de dados através de uma variável de ambiente.
}

// Definindo o modelo para a entidade 'Trip' (Viagem).
model Trip {
  id          String   @id @default(uuid())
  name        String
  location    String
  startDate   DateTime
  endDate     DateTime
  pricePerDay Decimal  @db.Decimal(8, 2)
  description String
  coverImage  String
  imagesUrl   String[]
  highlights  String[]
  maxGuests   Int

  // Estabelecendo uma relação de um-para-muitos com o modelo TripReservation.
  reservations TripReservation[]
  countryCode  String
  recommended  Boolean           @default(false)
}

// Definindo o modelo para a entidade 'TripReservation' (Reserva de Viagem).
model TripReservation {
  id          String   @id @default(uuid())
  tripId      String
  trip        Trip     @relation(fields: [tripId], references: [id]) // Relacionamento com o modelo Trip.
  userId      String
  user        User     @relation(fields: [userId], references: [id]) // Relacionamento com o modelo User.
  startDate   DateTime
  endDate     DateTime
  pricePerDay Decimal  @db.Decimal(8, 2)
}

// Definindo o modelo para a entidade 'User' (Usuário). // Tabelas já prontas pelo Auth.js prisma adapther
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservations  TripReservation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Após a modelagem do banco: Passa a DATABASE_URL do Banco SupaBase e passe para o .env
